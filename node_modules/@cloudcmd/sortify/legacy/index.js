'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var currify = require('currify/legacy');

var negative = function negative(fn) {
  return function () {
    return -1 * fn.apply(void 0, arguments);
  };
};

var not = function not(fn) {
  return function (a) {
    return !fn(a);
  };
};

var isDir = function isDir(file) {
  return file.size === 'dir';
};

var ascending = currify(function (attr, a, b) {
  return a[attr] > b[attr] ? 1 : -1;
});
module.exports = sortify;

function sortify(options, files) {
  checkOptions(options);
  var type = options.type;
  var order = options.order;
  var sort = options.sort || 'name';
  check(files, type);
  checkSort(sort, order);
  return sortFiles(sort, order, files);
}

function compare(attr, order) {
  if (order === 'desc') return negative(ascending(attr));
  return ascending(attr);
}

;

function check(files, type, callback) {
  var isString = function isString(a) {
    return typeof a === 'string';
  };

  var filesMsg = 'files should be an array!';
  var typeMsg = 'type should be a string or not to be defined!';
  if (!Array.isArray(files)) throw Error(filesMsg);
  if (type && !isString(type)) throw Error(typeMsg);
}

function checkOptions(options) {
  if (_typeof(options) !== 'object') throw Error('options should be an object!');
}

function checkSort(sort, order) {
  if (sort && typeof sort !== 'string') throw Error('sort should be a string!');
  if (order && !/^(asc|desc)$/.test(order)) throw Error('order can be "asc" or "desc" only!');
}

function sortFiles(attr, order, array) {
  var isFile = not(isDir);
  var dirs = array.filter(isDir).sort(compare(attr, order));
  var files = array.filter(isFile).sort(compare(attr, order));
  return dirs.concat(files);
}
