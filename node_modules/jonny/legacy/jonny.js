'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var tryCatch = require('try-catch');

var parse = JSON.parse,
    stringify = JSON.stringify;


module.exports.parse = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var _tryCatch = tryCatch.apply(undefined, [parse].concat(args)),
        _tryCatch2 = _slicedToArray(_tryCatch, 2),
        data = _tryCatch2[1];

    return data;
};

module.exports.stringify = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    var _tryCatch3 = tryCatch.apply(undefined, [stringify].concat(args)),
        _tryCatch4 = _slicedToArray(_tryCatch3, 2),
        data = _tryCatch4[1];

    return data;
};